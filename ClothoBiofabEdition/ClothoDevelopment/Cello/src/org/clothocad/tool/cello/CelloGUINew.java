/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CelloGUINew.java
 *
 * Created on Jul 27, 2011, 1:42:05 PM
 */

package org.clothocad.tool.cello;

/**
 *
 * @author rozagh
 */


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.ComboPopup;
import org.antlr.runtime.*;
import org.clothocore.api.core.Collector;
import org.openide.util.Exceptions;


public class CelloGUINew extends javax.swing.JFrame {

    /** Creates new form CelloGUINew */
    public CelloGUINew() {
        initComponents();

        //ArrayList<String> TFNameList =Main.CreateTFList();
        //lTFList.setListData(TFNameList.toArray());
    }

    public CelloGUINew(boolean connection) {
        initComponents();

        if(connection){
        ArrayList<String> TFNameList =Main.CreateTFList();
        lTFList.setListData(TFNameList.toArray());
        } else 
            lTFList.setListData(new String [] {"N/A"});

        isConnected = connection;
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FCBrowser = new javax.swing.JFileChooser();
        BGCostFunctions = new javax.swing.ButtonGroup();
        BGDoubleInverter = new javax.swing.ButtonGroup();
        BGDoubleInverterH = new javax.swing.ButtonGroup();
        BGOptimizationCriteria = new javax.swing.ButtonGroup();
        BGTarget = new javax.swing.ButtonGroup();
        FCSaveBrowser = new javax.swing.JFileChooser();
        TFAddress = new javax.swing.JTextField();
        PIOTFConstraint = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lTFList = new javax.swing.JList();
        BTFSelect = new javax.swing.JButton();
        BRefresh = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        TAInput = new javax.swing.JTextArea();
        TPControl = new javax.swing.JTabbedPane();
        PHome = new javax.swing.JPanel();
        BBrowse = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        BNewFile = new javax.swing.JButton();
        BSave = new javax.swing.JButton();
        BSaveAs = new javax.swing.JButton();
        CBTransfromNORH = new javax.swing.JCheckBox();
        CBfamilyNOR2H = new javax.swing.JCheckBox();
        CBfamilyNORnH = new javax.swing.JCheckBox();
        CBRemoveBuffersH = new javax.swing.JCheckBox();
        RBRemoveAllInvertersH = new javax.swing.JRadioButton();
        RBRemoveDoubleInvertersbutNORSH = new javax.swing.JRadioButton();
        CBRemoveDoubleInvertersGLH = new javax.swing.JCheckBox();
        BRunH = new javax.swing.JButton();
        CBImplementationsH = new javax.swing.JComboBox();
        BShowSequenceH = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        BPackCompositePartH = new javax.swing.JButton();
        PCompile = new javax.swing.JPanel();
        CBTransfromNOR = new javax.swing.JCheckBox();
        BCompileandGenerateGraph = new javax.swing.JButton();
        PGateLevelOptimize = new javax.swing.JPanel();
        BGateLevelOptimize = new javax.swing.JButton();
        CBFindRepeatPatterns = new javax.swing.JCheckBox();
        CBRemoveDoubleInvertersGL = new javax.swing.JCheckBox();
        RBRemoveAllInverters = new javax.swing.JRadioButton();
        RBRemoveDoubleInvertersbutNORS = new javax.swing.JRadioButton();
        PMapping = new javax.swing.JPanel();
        CBfamilyNOR2 = new javax.swing.JCheckBox();
        CBfamilyNORn = new javax.swing.JCheckBox();
        CBHaybridDual = new javax.swing.JCheckBox();
        BMapping = new javax.swing.JButton();
        CBImplementationsM = new javax.swing.JComboBox();
        PMotifLevelOptimization = new javax.swing.JPanel();
        CBRemoveBuffers = new javax.swing.JCheckBox();
        CBRemoveDoubleInverstersML = new javax.swing.JCheckBox();
        CBFindRepeatedPatterns = new javax.swing.JCheckBox();
        BMotifLevelOptimization = new javax.swing.JButton();
        CBImplementationsMO = new javax.swing.JComboBox();
        PAssignSequence = new javax.swing.JPanel();
        BShowSequence = new javax.swing.JButton();
        BFindBestSolution = new javax.swing.JButton();
        CBImplementations = new javax.swing.JComboBox();
        BPackCompositePart = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        CBImplementationsP = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        RBInductor = new javax.swing.JRadioButton();
        RBRepressor = new javax.swing.JRadioButton();
        RBPrimitives = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        RBMax = new javax.swing.JRadioButton();
        RBMin = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        TPResult = new javax.swing.JTabbedPane();
        SPLog = new javax.swing.JScrollPane();
        TALog = new javax.swing.JTextArea();
        SPOutput = new javax.swing.JScrollPane();
        TAResult = new javax.swing.JTextArea();
        PGraphView = new javax.swing.JPanel();
        CBMappedGV = new javax.swing.JCheckBox();
        CBImplementationsGV = new javax.swing.JComboBox();
        BShowGraph = new javax.swing.JButton();
        PGraphViewChild = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMFile = new javax.swing.JMenu();
        jMINew = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMIOpen = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMISave = new javax.swing.JMenuItem();
        jMISaveAs = new javax.swing.JMenuItem();
        jMEdit = new javax.swing.JMenu();
        MICopy = new javax.swing.JMenuItem();
        jMICut = new javax.swing.JMenuItem();
        jMIPaste = new javax.swing.JMenuItem();

        FCBrowser.setSelectedFile(new java.io.File("C:\\Users\\rozagh\\Documents\\NetBeansProjects\\Clotho\\ClothoDevelopment\\Cello\\VerilogCodes"));
        FCBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FCBrowserActionPerformed(evt);
            }
        });

        FCSaveBrowser.setApproveButtonToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.FCSaveBrowser.approveButtonToolTipText")); // NOI18N
        FCSaveBrowser.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(948, 598));

        TFAddress.setEditable(false);
        TFAddress.setFont(new java.awt.Font("Tahoma", 1, 11));
        TFAddress.setName("TFAddress"); // NOI18N

        PIOTFConstraint.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PIOTFConstraint.border.title"))); // NOI18N

        jScrollPane6.setViewportView(lTFList);

        BTFSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/favourites_32.png"))); // NOI18N
        BTFSelect.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BTFSelect.text")); // NOI18N
        BTFSelect.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BTFSelect.toolTipText")); // NOI18N
        BTFSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTFSelectActionPerformed(evt);
            }
        });

        BRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/Sign-Refresh-icon.png"))); // NOI18N
        BRefresh.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BRefresh.text")); // NOI18N
        BRefresh.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BRefresh.toolTipText")); // NOI18N
        BRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PIOTFConstraintLayout = new javax.swing.GroupLayout(PIOTFConstraint);
        PIOTFConstraint.setLayout(PIOTFConstraintLayout);
        PIOTFConstraintLayout.setHorizontalGroup(
            PIOTFConstraintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PIOTFConstraintLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PIOTFConstraintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BTFSelect, 0, 0, Short.MAX_VALUE)
                    .addComponent(BRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 51, Short.MAX_VALUE))
                .addContainerGap())
        );
        PIOTFConstraintLayout.setVerticalGroup(
            PIOTFConstraintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PIOTFConstraintLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PIOTFConstraintLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addGroup(PIOTFConstraintLayout.createSequentialGroup()
                        .addComponent(BTFSelect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BRefresh)))
                .addContainerGap())
        );

        TAInput.setColumns(20);
        TAInput.setRows(5);
        TAInput.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        TAInput.setMargin(new java.awt.Insets(4, 8, 2, 4));
        jScrollPane4.setViewportView(TAInput);

        TPControl.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TPControlStateChanged(evt);
            }
        });

        BBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/open_32.png"))); // NOI18N
        BBrowse.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BBrowse.text")); // NOI18N
        BBrowse.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BBrowse.toolTipText")); // NOI18N
        BBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BBrowseActionPerformed(evt);
            }
        });

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        BNewFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/document_add_32.png"))); // NOI18N
        BNewFile.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BNewFile.text")); // NOI18N
        BNewFile.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BNewFile.toolTipText")); // NOI18N
        BNewFile.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BNewFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BNewFileActionPerformed(evt);
            }
        });

        BSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/save_32.png"))); // NOI18N
        BSave.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BSave.text")); // NOI18N
        BSave.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BSave.toolTipText")); // NOI18N
        BSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSaveActionPerformed(evt);
            }
        });

        BSaveAs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/saveas_32.png"))); // NOI18N
        BSaveAs.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BSaveAs.text")); // NOI18N
        BSaveAs.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BSaveAs.toolTipText")); // NOI18N
        BSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSaveAsActionPerformed(evt);
            }
        });

        CBTransfromNORH.setSelected(true);
        CBTransfromNORH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBTransfromNORH.text")); // NOI18N
        CBTransfromNORH.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        CBfamilyNOR2H.setSelected(true);
        CBfamilyNOR2H.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBfamilyNOR2H.text")); // NOI18N

        CBfamilyNORnH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBfamilyNORnH.text")); // NOI18N

        CBRemoveBuffersH.setSelected(true);
        CBRemoveBuffersH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBRemoveBuffersH.text")); // NOI18N

        BGDoubleInverterH.add(RBRemoveAllInvertersH);
        RBRemoveAllInvertersH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBRemoveAllInvertersH.text")); // NOI18N
        RBRemoveAllInvertersH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RBRemoveAllInvertersHActionPerformed(evt);
            }
        });

        BGDoubleInverterH.add(RBRemoveDoubleInvertersbutNORSH);
        RBRemoveDoubleInvertersbutNORSH.setSelected(true);
        RBRemoveDoubleInvertersbutNORSH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBRemoveDoubleInvertersbutNORSH.text")); // NOI18N
        RBRemoveDoubleInvertersbutNORSH.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        CBRemoveDoubleInvertersGLH.setSelected(true);
        CBRemoveDoubleInvertersGLH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBRemoveDoubleInvertersGLH.text")); // NOI18N
        CBRemoveDoubleInvertersGLH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBRemoveDoubleInvertersGLHActionPerformed(evt);
            }
        });

        BRunH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/play_48.png"))); // NOI18N
        BRunH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BRunH.text")); // NOI18N
        BRunH.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BRunH.toolTipText")); // NOI18N
        BRunH.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BRunH.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BRunH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRunHActionPerformed(evt);
            }
        });

        CBImplementationsH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsHMouseClicked(evt);
            }
        });

        BShowSequenceH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/music_48.png"))); // NOI18N
        BShowSequenceH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowSequenceH.text")); // NOI18N
        BShowSequenceH.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowSequenceH.toolTipText")); // NOI18N
        BShowSequenceH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BShowSequenceHActionPerformed(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);

        BPackCompositePartH.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/box_48.png"))); // NOI18N
        BPackCompositePartH.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BPackCompositePartH.text")); // NOI18N
        BPackCompositePartH.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BPackCompositePartH.toolTipText")); // NOI18N
        BPackCompositePartH.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BPackCompositePartH.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BPackCompositePartH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPackCompositePartHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PHomeLayout = new javax.swing.GroupLayout(PHome);
        PHome.setLayout(PHomeLayout);
        PHomeLayout.setHorizontalGroup(
            PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PHomeLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BSave, 0, 50, Short.MAX_VALUE)
                    .addComponent(BNewFile, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BBrowse, 0, 53, Short.MAX_VALUE)
                    .addComponent(BSaveAs, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CBRemoveDoubleInvertersGLH, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBTransfromNORH, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RBRemoveDoubleInvertersbutNORSH)
                    .addComponent(RBRemoveAllInvertersH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PHomeLayout.createSequentialGroup()
                        .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CBfamilyNOR2H)
                            .addComponent(CBfamilyNORnH))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BRunH))
                    .addComponent(CBRemoveBuffersH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BShowSequenceH)
                    .addComponent(CBImplementationsH, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BPackCompositePartH)
                .addContainerGap(35, Short.MAX_VALUE))
        );
        PHomeLayout.setVerticalGroup(
            PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(BNewFile)
                    .addComponent(BBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BSaveAs))
                .addContainerGap(18, Short.MAX_VALUE))
            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
            .addGroup(PHomeLayout.createSequentialGroup()
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PHomeLayout.createSequentialGroup()
                        .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CBTransfromNORH)
                            .addGroup(PHomeLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(CBRemoveDoubleInvertersGLH)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBRemoveDoubleInvertersbutNORSH, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBRemoveAllInvertersH))
                    .addGroup(PHomeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BRunH))
                    .addGroup(PHomeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CBfamilyNOR2H)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBfamilyNORnH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBRemoveBuffersH)))
                .addContainerGap())
            .addGroup(PHomeLayout.createSequentialGroup()
                .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                    .addGroup(PHomeLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(PHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                            .addGroup(PHomeLayout.createSequentialGroup()
                                .addComponent(CBImplementationsH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(BShowSequenceH))
                            .addComponent(BPackCompositePartH))))
                .addContainerGap())
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PHome.TabConstraints.tabTitle"), PHome); // NOI18N

        CBTransfromNOR.setSelected(true);
        CBTransfromNOR.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBTransfromNOR.text")); // NOI18N

        BCompileandGenerateGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/compile_48x.png"))); // NOI18N
        BCompileandGenerateGraph.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BCompileandGenerateGraph.text")); // NOI18N
        BCompileandGenerateGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCompileandGenerateGraphActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PCompileLayout = new javax.swing.GroupLayout(PCompile);
        PCompile.setLayout(PCompileLayout);
        PCompileLayout.setHorizontalGroup(
            PCompileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCompileLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CBTransfromNOR)
                .addGap(36, 36, 36)
                .addComponent(BCompileandGenerateGraph)
                .addContainerGap(556, Short.MAX_VALUE))
        );
        PCompileLayout.setVerticalGroup(
            PCompileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PCompileLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PCompileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CBTransfromNOR)
                    .addComponent(BCompileandGenerateGraph))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PCompile.TabConstraints.tabTitle"), PCompile); // NOI18N

        BGateLevelOptimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/recycle_48.png"))); // NOI18N
        BGateLevelOptimize.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BGateLevelOptimize.text")); // NOI18N
        BGateLevelOptimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BGateLevelOptimizeActionPerformed(evt);
            }
        });

        CBFindRepeatPatterns.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBFindRepeatPatterns.text")); // NOI18N
        CBFindRepeatPatterns.setEnabled(false);
        CBFindRepeatPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBFindRepeatPatternsActionPerformed(evt);
            }
        });

        CBRemoveDoubleInvertersGL.setSelected(true);
        CBRemoveDoubleInvertersGL.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBRemoveDoubleInvertersGL.text")); // NOI18N
        CBRemoveDoubleInvertersGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBRemoveDoubleInvertersGLActionPerformed(evt);
            }
        });

        BGDoubleInverter.add(RBRemoveAllInverters);
        RBRemoveAllInverters.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBRemoveAllInverters.text")); // NOI18N

        BGDoubleInverter.add(RBRemoveDoubleInvertersbutNORS);
        RBRemoveDoubleInvertersbutNORS.setSelected(true);
        RBRemoveDoubleInvertersbutNORS.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBRemoveDoubleInvertersbutNORS.text")); // NOI18N

        javax.swing.GroupLayout PGateLevelOptimizeLayout = new javax.swing.GroupLayout(PGateLevelOptimize);
        PGateLevelOptimize.setLayout(PGateLevelOptimizeLayout);
        PGateLevelOptimizeLayout.setHorizontalGroup(
            PGateLevelOptimizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PGateLevelOptimizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PGateLevelOptimizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CBRemoveDoubleInvertersGL)
                    .addComponent(CBFindRepeatPatterns))
                .addGap(18, 18, 18)
                .addGroup(PGateLevelOptimizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBRemoveAllInverters)
                    .addComponent(RBRemoveDoubleInvertersbutNORS))
                .addGap(27, 27, 27)
                .addComponent(BGateLevelOptimize)
                .addContainerGap(346, Short.MAX_VALUE))
        );
        PGateLevelOptimizeLayout.setVerticalGroup(
            PGateLevelOptimizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PGateLevelOptimizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PGateLevelOptimizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PGateLevelOptimizeLayout.createSequentialGroup()
                        .addComponent(RBRemoveAllInverters)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RBRemoveDoubleInvertersbutNORS))
                    .addGroup(PGateLevelOptimizeLayout.createSequentialGroup()
                        .addComponent(CBFindRepeatPatterns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBRemoveDoubleInvertersGL))
                    .addComponent(BGateLevelOptimize))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PGateLevelOptimize.TabConstraints.tabTitle"), PGateLevelOptimize); // NOI18N

        CBfamilyNOR2.setSelected(true);
        CBfamilyNOR2.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBfamilyNOR2.text")); // NOI18N

        CBfamilyNORn.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBfamilyNORn.text")); // NOI18N
        CBfamilyNORn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBfamilyNORnActionPerformed(evt);
            }
        });

        CBHaybridDual.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBHaybridDual.text")); // NOI18N
        CBHaybridDual.setEnabled(false);

        BMapping.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/world_48.png"))); // NOI18N
        BMapping.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BMapping.text")); // NOI18N
        BMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMappingActionPerformed(evt);
            }
        });

        CBImplementationsM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsMMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PMappingLayout = new javax.swing.GroupLayout(PMapping);
        PMapping.setLayout(PMappingLayout);
        PMappingLayout.setHorizontalGroup(
            PMappingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PMappingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PMappingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PMappingLayout.createSequentialGroup()
                        .addComponent(CBfamilyNOR2)
                        .addGap(80, 80, 80)
                        .addComponent(CBImplementationsM, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CBfamilyNORn)
                    .addComponent(CBHaybridDual))
                .addGap(18, 18, 18)
                .addComponent(BMapping)
                .addContainerGap(426, Short.MAX_VALUE))
        );
        PMappingLayout.setVerticalGroup(
            PMappingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PMappingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PMappingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PMappingLayout.createSequentialGroup()
                        .addGroup(PMappingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CBfamilyNOR2)
                            .addComponent(CBImplementationsM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(CBfamilyNORn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBHaybridDual))
                    .addComponent(BMapping))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PMapping.TabConstraints.tabTitle"), PMapping); // NOI18N

        CBRemoveBuffers.setSelected(true);
        CBRemoveBuffers.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBRemoveBuffers.text")); // NOI18N

        CBRemoveDoubleInverstersML.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBRemoveDoubleInverstersML.text")); // NOI18N
        CBRemoveDoubleInverstersML.setEnabled(false);

        CBFindRepeatedPatterns.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBFindRepeatedPatterns.text")); // NOI18N
        CBFindRepeatedPatterns.setEnabled(false);

        BMotifLevelOptimization.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/recycle_48.png"))); // NOI18N
        BMotifLevelOptimization.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BMotifLevelOptimization.text")); // NOI18N
        BMotifLevelOptimization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMotifLevelOptimizationActionPerformed(evt);
            }
        });

        CBImplementationsMO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsMOMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PMotifLevelOptimizationLayout = new javax.swing.GroupLayout(PMotifLevelOptimization);
        PMotifLevelOptimization.setLayout(PMotifLevelOptimizationLayout);
        PMotifLevelOptimizationLayout.setHorizontalGroup(
            PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PMotifLevelOptimizationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PMotifLevelOptimizationLayout.createSequentialGroup()
                        .addGroup(PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CBRemoveBuffers)
                            .addComponent(CBRemoveDoubleInverstersML))
                        .addGap(56, 56, 56)
                        .addComponent(CBImplementationsMO, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CBFindRepeatedPatterns))
                .addGap(31, 31, 31)
                .addComponent(BMotifLevelOptimization)
                .addContainerGap(423, Short.MAX_VALUE))
        );
        PMotifLevelOptimizationLayout.setVerticalGroup(
            PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PMotifLevelOptimizationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PMotifLevelOptimizationLayout.createSequentialGroup()
                        .addGroup(PMotifLevelOptimizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CBRemoveBuffers)
                            .addComponent(CBImplementationsMO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBRemoveDoubleInverstersML)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBFindRepeatedPatterns))
                    .addComponent(BMotifLevelOptimization))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PMotifLevelOptimization.TabConstraints.tabTitle"), PMotifLevelOptimization); // NOI18N

        BShowSequence.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/music_48.png"))); // NOI18N
        BShowSequence.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowSequence.text")); // NOI18N
        BShowSequence.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowSequence.toolTipText")); // NOI18N
        BShowSequence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BShowSequenceActionPerformed(evt);
            }
        });

        BFindBestSolution.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/microphone_48.png"))); // NOI18N
        BFindBestSolution.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BFindBestSolution.text")); // NOI18N
        BFindBestSolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BFindBestSolutionActionPerformed(evt);
            }
        });

        CBImplementations.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsMouseClicked(evt);
            }
        });
        CBImplementations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBImplementationsActionPerformed(evt);
            }
        });

        BPackCompositePart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/box_48.png"))); // NOI18N
        BPackCompositePart.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BPackCompositePart.text")); // NOI18N
        BPackCompositePart.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BPackCompositePart.toolTipText")); // NOI18N
        BPackCompositePart.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BPackCompositePart.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BPackCompositePart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BPackCompositePartActionPerformed(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);

        CBImplementationsP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsPMouseClicked(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jPanel1.border.title"))); // NOI18N

        BGOptimizationCriteria.add(RBInductor);
        RBInductor.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBInductor.text")); // NOI18N

        BGOptimizationCriteria.add(RBRepressor);
        RBRepressor.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBRepressor.text")); // NOI18N

        BGOptimizationCriteria.add(RBPrimitives);
        RBPrimitives.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBPrimitives.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBPrimitives)
                    .addComponent(RBRepressor)
                    .addComponent(RBInductor))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(RBPrimitives)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBRepressor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBInductor))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jPanel2.border.title"))); // NOI18N

        BGTarget.add(RBMax);
        RBMax.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBMax.text")); // NOI18N

        BGTarget.add(RBMin);
        RBMin.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.RBMin.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(RBMin)
                    .addComponent(RBMax))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(RBMax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RBMin)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PAssignSequenceLayout = new javax.swing.GroupLayout(PAssignSequence);
        PAssignSequence.setLayout(PAssignSequenceLayout);
        PAssignSequenceLayout.setHorizontalGroup(
            PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PAssignSequenceLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BFindBestSolution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BShowSequence)
                    .addComponent(CBImplementations, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CBImplementationsP, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BPackCompositePart)
                .addContainerGap(93, Short.MAX_VALUE))
        );
        PAssignSequenceLayout.setVerticalGroup(
            PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PAssignSequenceLayout.createSequentialGroup()
                .addGroup(PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PAssignSequenceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(BFindBestSolution))
                    .addGroup(PAssignSequenceLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(CBImplementationsP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PAssignSequenceLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(BPackCompositePart))
                    .addGroup(PAssignSequenceLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(CBImplementations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BShowSequence))
                    .addGroup(PAssignSequenceLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(PAssignSequenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator7, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TPControl.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PAssignSequence.TabConstraints.tabTitle"), PAssignSequence); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jLabel1.text")); // NOI18N

        SPLog.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.SPLog.toolTipText")); // NOI18N

        TALog.setColumns(20);
        TALog.setRows(5);
        SPLog.setViewportView(TALog);

        TPResult.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.SPLog.TabConstraints.tabTitle"), SPLog); // NOI18N

        SPOutput.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.SPOutput.toolTipText")); // NOI18N

        TAResult.setColumns(20);
        TAResult.setRows(5);
        SPOutput.setViewportView(TAResult);

        TPResult.addTab(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.SPOutput.TabConstraints.tabTitle"), SPOutput); // NOI18N

        PGraphView.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.PGraphView.border.title"))); // NOI18N

        CBMappedGV.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBMappedGV.text")); // NOI18N
        CBMappedGV.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBMappedGV.toolTipText")); // NOI18N

        CBImplementationsGV.setMaximumRowCount(2);
        CBImplementationsGV.setAutoscrolls(true);
        CBImplementationsGV.setMaximumSize(new java.awt.Dimension(23, 40));
        CBImplementationsGV.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CBImplementationsGVMouseClicked(evt);
            }
        });
        CBImplementationsGV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBImplementationsGVActionPerformed(evt);
            }
        });

        BShowGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/clothocad/tool/cello/icons/brush_32.png"))); // NOI18N
        BShowGraph.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowGraph.text")); // NOI18N
        BShowGraph.setToolTipText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.BShowGraph.toolTipText")); // NOI18N
        BShowGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BShowGraphActionPerformed(evt);
            }
        });

        PGraphViewChild.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PGraphViewChild.setAutoscrolls(true);
        PGraphViewChild.setMaximumSize(new java.awt.Dimension(312, 455));
        PGraphViewChild.setMinimumSize(new java.awt.Dimension(312, 455));

        javax.swing.GroupLayout PGraphViewChildLayout = new javax.swing.GroupLayout(PGraphViewChild);
        PGraphViewChild.setLayout(PGraphViewChildLayout);
        PGraphViewChildLayout.setHorizontalGroup(
            PGraphViewChildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 794, Short.MAX_VALUE)
        );
        PGraphViewChildLayout.setVerticalGroup(
            PGraphViewChildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 453, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout PGraphViewLayout = new javax.swing.GroupLayout(PGraphView);
        PGraphView.setLayout(PGraphViewLayout);
        PGraphViewLayout.setHorizontalGroup(
            PGraphViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PGraphViewLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PGraphViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(PGraphViewChild, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PGraphViewLayout.createSequentialGroup()
                        .addComponent(CBImplementationsGV, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(CBMappedGV)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 444, Short.MAX_VALUE)
                        .addComponent(BShowGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        PGraphViewLayout.setVerticalGroup(
            PGraphViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PGraphViewLayout.createSequentialGroup()
                .addGroup(PGraphViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PGraphViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CBImplementationsGV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CBMappedGV))
                    .addComponent(BShowGraph))
                .addGap(18, 18, 18)
                .addComponent(PGraphViewChild, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CBMappedGV.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.CBMappedGV.AccessibleContext.accessibleName")); // NOI18N

        jMFile.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMFile.text")); // NOI18N

        jMINew.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMINew.text")); // NOI18N
        jMFile.add(jMINew);
        jMFile.add(jSeparator1);

        jMIOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMIOpen.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMIOpen.text_1")); // NOI18N
        jMIOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIOpenActionPerformed(evt);
            }
        });
        jMFile.add(jMIOpen);
        jMFile.add(jSeparator2);

        jMISave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISave.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMISave.text")); // NOI18N
        jMISave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISaveActionPerformed(evt);
            }
        });
        jMFile.add(jMISave);

        jMISaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMISaveAs.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMISaveAs.text")); // NOI18N
        jMFile.add(jMISaveAs);

        jMenuBar1.add(jMFile);

        jMEdit.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMEdit.text")); // NOI18N

        MICopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        MICopy.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.MICopy.text")); // NOI18N
        MICopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MICopyActionPerformed(evt);
            }
        });
        jMEdit.add(MICopy);

        jMICut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        jMICut.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMICut.text")); // NOI18N
        jMICut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICutActionPerformed(evt);
            }
        });
        jMEdit.add(jMICut);

        jMIPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        jMIPaste.setText(org.openide.util.NbBundle.getMessage(CelloGUINew.class, "CelloGUINew.jMIPaste.text")); // NOI18N
        jMIPaste.setEnabled(false);
        jMIPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIPasteActionPerformed(evt);
            }
        });
        jMEdit.add(jMIPaste);

        jMenuBar1.add(jMEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TPControl, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 933, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PIOTFConstraint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PGraphView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(TPResult, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TFAddress, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(TPControl, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TFAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PGraphView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PIOTFConstraint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(TPResult, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIOpenActionPerformed
        // TODO add your handling code here:
      int returnVal =  FCBrowser.showOpenDialog(CelloGUINew.this);

        if ( returnVal == JFileChooser.APPROVE_OPTION) {

            String filepath = FCBrowser.getSelectedFile().getPath();
            if(!filepath.endsWith(".v")) {
                TALog.append("Invalid file selection!\n");
            }else {
                TFAddress.setText(filepath);
                String fileinside = "";
                try {
                    FileReader fr = new FileReader(filepath);
                    BufferedReader br = new BufferedReader(fr);
                    String line = "";
                    try {
                        while ((line = br.readLine()) != null) {
                            fileinside += line + "\n";
                        }
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }

                } catch (FileNotFoundException ex) {
                    Exceptions.printStackTrace(ex);
                }

                TAInput.setText(fileinside);
                TALog.append("File :"+filepath+" is loaded!\n");
            }
        }
}//GEN-LAST:event_jMIOpenActionPerformed

   
    private void jMISaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISaveActionPerformed
        try {
            FileWriter fr = new FileWriter(TFAddress.getText());
            BufferedWriter br = new BufferedWriter(fr);
            String s = TAInput.getText();
            br.write(s, 0, s.length());
            br.close();

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_jMISaveActionPerformed

    private void BTFSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTFSelectActionPerformed
        // TODO add your handling code here:

        int[] selectedTFi = lTFList.getSelectedIndices();

        Main.setTFList(selectedTFi);

        lTFList.updateUI();
    }//GEN-LAST:event_BTFSelectActionPerformed

    private void BBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BBrowseActionPerformed
        // TODO add your handling code here:
        int returnVal =  FCBrowser.showOpenDialog(CelloGUINew.this);

        if ( returnVal == JFileChooser.APPROVE_OPTION) {

            String filepath = FCBrowser.getSelectedFile().getPath();
            if(!filepath.endsWith(".v")) {
                TALog.append("Invalid file selection!\n");
            }else {
                TFAddress.setText(filepath);
                String fileinside = "";
                try {
                    FileReader fr = new FileReader(filepath);
                    BufferedReader br = new BufferedReader(fr);
                    String line = "";
                    try {
                        while ((line = br.readLine()) != null) {
                            fileinside += line + "\n";
                        }
                    } catch (IOException ex) {
                        Exceptions.printStackTrace(ex);
                    }

                } catch (FileNotFoundException ex) {
                    Exceptions.printStackTrace(ex);
                }

                TAInput.setText(fileinside);
                TALog.append("File :"+filepath+" is loaded!\n");
            }
        }

       // FCBrowser.showOpenDialog(BRun);
}//GEN-LAST:event_BBrowseActionPerformed

    private void BSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSaveActionPerformed
        // TODO add your handling code here:

        if (TFAddress.getText().length()==0)
            saveAs(TAInput.getText(), "");
        else
            save(TFAddress.getText(), TAInput.getText());
        

    }//GEN-LAST:event_BSaveActionPerformed

    private void BSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BSaveAsActionPerformed
        // TODO add your handling code here:

        saveAs(TAInput.getText(), TFAddress.getText());

    }//GEN-LAST:event_BSaveAsActionPerformed

    private void RBRemoveAllInvertersHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RBRemoveAllInvertersHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RBRemoveAllInvertersHActionPerformed

    private void CBRemoveDoubleInvertersGLHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBRemoveDoubleInvertersGLHActionPerformed
        // TODO add your handling code here:

        RBRemoveAllInvertersH.setEnabled(CBRemoveDoubleInvertersGLH.isSelected());
        RBRemoveDoubleInvertersbutNORSH.setEnabled(CBRemoveDoubleInvertersGLH.isSelected());
    }//GEN-LAST:event_CBRemoveDoubleInvertersGLHActionPerformed

    private void BCompileandGenerateGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCompileandGenerateGraphActionPerformed
        // TODO add your handling code here:

        boolean flag = false;
        if (TFAddress.getText().length()==0)
            flag = saveAs(TAInput.getText(), "");
        else
            flag = save(TFAddress.getText(), TAInput.getText());

        if (flag){
        String [] error = new String[1];
        error[0] = "";

        try {
            // TODO add your handling code here:
            TAResult.append("\n-----------------------------------------------\n" + Main.AST_Generate(TFAddress.getText(), error ));
        } catch (IOException ex) {
            Logger.getLogger(CelloGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RecognitionException ex) {
            Logger.getLogger(CelloGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        TALog.append("Abstract Syntax Tree generation done\n" + error[0]);

        if (CBTransfromNOR.isSelected()) {
            String [] error2 = new String[1];
            error2[0] = "";
            TAResult.append(Main.gateLevelMapping(error2));
            TALog.append("Technology Mapping to NOR is done!\n"+error2[0]);
        }

        CBImplementationsGV.removeAllItems();
        CBImplementationsM.removeAllItems();
        //CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementationsGV.addItem(s);
            CBImplementationsM.addItem(s);
        }
        }

    }//GEN-LAST:event_BCompileandGenerateGraphActionPerformed

    private void BGateLevelOptimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BGateLevelOptimizeActionPerformed
        // TODO add your handling code here:

        String [] error = new String[1];
        error[0] = "";
        TAResult.append(Main.gateLevelOptimization(error, CBRemoveDoubleInvertersGL.isSelected(), RBRemoveDoubleInvertersbutNORS.isSelected()));
        TALog.append("Gate Level Optimization is done!\n"+error[0]);

        //update Combo List for graph view
        
        CBImplementationsGV.removeAllItems();
        CBImplementationsM.removeAllItems();
        //CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementationsGV.addItem(s);
            CBImplementationsM.addItem(s);
        }
    }//GEN-LAST:event_BGateLevelOptimizeActionPerformed

    private void CBFindRepeatPatternsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBFindRepeatPatternsActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_CBFindRepeatPatternsActionPerformed

    private void CBRemoveDoubleInvertersGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBRemoveDoubleInvertersGLActionPerformed
        // TODO add your handling code here:

        RBRemoveAllInverters.setEnabled(CBRemoveDoubleInvertersGL.isSelected());
        RBRemoveDoubleInvertersbutNORS.setEnabled(CBRemoveDoubleInvertersGL.isSelected());
    }//GEN-LAST:event_CBRemoveDoubleInvertersGLActionPerformed

    private void BMappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMappingActionPerformed
        // TODO add your handling code here:

        TAResult.append(Main.motifLevelMapping((String) CBImplementationsM.getSelectedItem(), CBfamilyNOR2.isSelected(), CBfamilyNORn.isSelected()));
        TALog.append("Parts mapping done!\n");


        //update Combo List for graph view and the combo box for showing the sequence
        
        CBImplementationsGV.removeAllItems();
        CBImplementations.removeAllItems();
        CBImplementationsMO.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementationsGV.addItem(s);
            CBImplementations.addItem(s);
            CBImplementationsMO.addItem(s);
        }

    }//GEN-LAST:event_BMappingActionPerformed

    private void BMotifLevelOptimizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMotifLevelOptimizationActionPerformed
        // TODO add your handling code here:

        String[] msg = new String[1];
        msg[0] = "";
        TAResult.append(Main.motifLevelOptimization((String) CBImplementationsMO.getSelectedItem(),  msg));
        TALog.append(msg[0]+"Optimization done!\n");

        CBImplementationsGV.removeAllItems();
        CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementationsGV.addItem(s);
            CBImplementations.addItem(s);
        }
}//GEN-LAST:event_BMotifLevelOptimizationActionPerformed

    private void BShowSequenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BShowSequenceActionPerformed
        // TODO add your handling code here:

        if (!isConnected)
        {
            if(!Collector.isConnected()) {
                JOptionPane.showMessageDialog( null, "Database connection required for assigning features to motifs!\nConnect to Db and referesh TF list.",
                                           "Not connected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else
                isConnected = true;
        }
        String [] error = new String[1];
        error[0] = "";

        if (((String)CBImplementations.getSelectedItem()).startsWith("Assigned-")){
            TAResult.append(Main.implementations.get((String)CBImplementations.getSelectedItem()).getMappedGraph().printSequence());
            TPResult.setSelectedComponent(SPOutput);
        }
        else{
            DInOutSelection dialog = new DInOutSelection(this, true);
            if(dialog.returnFlag){
                TAResult.append(Main.assignSequence((String)CBImplementations.getSelectedItem(), error)+"\n");

                TALog.append("Sequence assignment done!\n"+error[0]);
                TPResult.setSelectedComponent(SPOutput);
                CBImplementations.removeAllItems();
                CBImplementationsGV.removeAllItems();
                CBImplementationsP.removeAllItems();
                //CBImplementations.removeAllItems();
                Iterator<String> iter = Main.getImplementation().iterator();
                while(iter.hasNext()){
                    String s = iter.next();
                    CBImplementations.addItem(s);
                    CBImplementationsGV.addItem(s);
                    if (s.startsWith("Assigned"))
                        CBImplementationsP.addItem(s);
                }
            }
        }
}//GEN-LAST:event_BShowSequenceActionPerformed

    private void CBImplementationsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsMouseClicked
        // TODO add your handling code here:
        CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            CBImplementations.addItem(iter.next());
        }
}//GEN-LAST:event_CBImplementationsMouseClicked

    private void TPControlStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TPControlStateChanged
        // TODO add your handling code here:
        /*JTabbedPane pane = (JTabbedPane)evt.getSource();
        int si = pane.getSelectedIndex();
        int sa = TPControl.indexOfTab("Assign Sequence");
        if(si == sa)
        {
           CBImplementations.removeAllItems();
           Iterator<String> iter = Main.getImplementation().iterator();
           while(iter.hasNext()){
               CBImplementations.addItem(iter.next());
           }
        }
         *
         */
    }//GEN-LAST:event_TPControlStateChanged

    private void FCBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FCBrowserActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_FCBrowserActionPerformed

    private void BRunHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRunHActionPerformed
        // TODO add your handling code here:

         boolean flag = false;
        if (TFAddress.getText().length()==0)
            flag = saveAs(TAInput.getText(), "");
        else
            flag = save(TFAddress.getText(), TAInput.getText());

        if (flag){

        String [] error = new String[1];
        error[0] = "";
        //AST generation
        try {
            // TODO add your handling code here:
            TAResult.append("\n-----------------------------------------------\n" + Main.AST_Generate(TFAddress.getText(), error ));
        } catch (IOException ex) {
            Logger.getLogger(CelloGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RecognitionException ex) {
            Logger.getLogger(CelloGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        TALog.append("Abstract Syntax Tree generation done\n" + error[0]);

        //Transformation
        if (CBTransfromNORH.isSelected()) {
            String [] error2 = new String[1];
            error2[0] = "";
            TAResult.append(Main.gateLevelMapping(error2));
            TALog.append("Technology Mapping to NOR is done!\n"+error2[0]);
        }


        //Gate level optimization
        
        if(CBRemoveDoubleInvertersGLH.isSelected()){
        //error[0] = "";
        TAResult.append(Main.gateLevelOptimization(error, CBRemoveDoubleInvertersGLH.isSelected(), RBRemoveDoubleInvertersbutNORSH.isSelected()));
        TALog.append("Gate Level Optimization is done!\n"+error[0]);
        }


        //Mapping
        String key = "AST";
        if(CBTransfromNORH.isSelected())
            key = "Transformed";
        if (CBRemoveDoubleInvertersGLH.isSelected())
            key = "GOpt-"+key;
        TAResult.append(Main.motifLevelMapping( key, CBfamilyNOR2H.isSelected(), CBfamilyNORnH.isSelected()));
        TALog.append("Parts mapping done!\n");


        //Motif level optimization
        if (CBRemoveBuffersH.isSelected()){
        String[] msg = new String[1];
        msg[0] = "";
        TAResult.append( Main.motifLevelOptimization( key, msg));
        TALog.append(msg[0]+"Optimization done!\n");
        }

        CBImplementationsH.removeAllItems();
        CBImplementationsGV.removeAllItems();
        //CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementationsH.addItem(s);
            CBImplementationsGV.addItem(s);
        }
        }

    }//GEN-LAST:event_BRunHActionPerformed

    private void CBImplementationsHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsHMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsHMouseClicked

    private void BShowSequenceHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BShowSequenceHActionPerformed
        // TODO add your handling code here:
        if (!isConnected)
        {
            if(!Collector.isConnected()) {
                JOptionPane.showMessageDialog( null, "Database connection required for assigning features to motifs!\nConnect to Db and referesh TF list.",
                                           "Not connected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else
                isConnected = true;
        }
        String [] error = new String[1];
        error[0] = "";

        if (((String)CBImplementationsH.getSelectedItem()).startsWith("Assigned-")){
            TAResult.append(Main.implementations.get((String)CBImplementationsH.getSelectedItem()).getMappedGraph().printSequence());
            TPResult.setSelectedComponent(SPOutput);
        }
        else{
            DInOutSelection dialog = new DInOutSelection(this, true);
            if(dialog.returnFlag){
                TAResult.append(Main.assignSequence((String)CBImplementationsH.getSelectedItem(), error)+"\n");
                TPResult.setSelectedComponent(SPOutput);
                TALog.append("Sequence assignment done!\n"+error[0]);

                CBImplementationsH.removeAllItems();
                CBImplementationsGV.removeAllItems();
                //CBImplementations.removeAllItems();
                Iterator<String> iter = Main.getImplementation().iterator();
                while(iter.hasNext()){
                    String s = iter.next();
                    CBImplementationsH.addItem(s);
                    CBImplementationsGV.addItem(s);
                }
            }
        }
        
    }//GEN-LAST:event_BShowSequenceHActionPerformed

    private void CBImplementationsGVMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsGVMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsGVMouseClicked

    private void BShowGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BShowGraphActionPerformed
        // TODO add your handling code here:
        //JFrame frame = new JFrame();
       /* IFGraphView = new JInternalFrame();
        Container content = IFGraphView.getContentPane();
        //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        content.add( new CelloGraphViewer(null));
        IFGraphView.pack();
        IFGraphView.setVisible(true);
        //frame.setVisible(true);

        //PGraphViewChild.add(frame);
        *
        */
        PGraphViewChild.setVisible(true);
        PGraphViewChild.setLayout(new BorderLayout());
        PGraphViewChild.removeAll();
        Dimension d =  new Dimension(PGraphViewChild.getHeight()-1, PGraphViewChild.getWidth()-1);
        if (CBMappedGV.isSelected())
            if (Main.implementations.get((String)CBImplementationsGV.getSelectedItem()).getMappedGraph().Vertices.size() >0 )
            {
                CelloGraphViewer cgv = new CelloGraphViewer(Main.implementations.get((String)CBImplementationsGV.getSelectedItem()).getMappedGraph(), d);
                PGraphViewChild.add(cgv, BorderLayout.CENTER);

            } else
            {
                JOptionPane.showMessageDialog(null, "No Mapped Graph Exists for this implementation!", "Error!", JOptionPane.ERROR_MESSAGE );
                return;
            }
        else
        {
            CelloGraphViewer cgv = new CelloGraphViewer(Main.implementations.get((String)CBImplementationsGV.getSelectedItem()).getInputGraph(), d);
            PGraphViewChild.add(cgv, BorderLayout.CENTER);
        }

        //PGraphViewChild.setSize(d);
        PGraphViewChild.updateUI();
        
    }//GEN-LAST:event_BShowGraphActionPerformed

    private void CBfamilyNORnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBfamilyNORnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBfamilyNORnActionPerformed

    private void CBImplementationsMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsMMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsMMouseClicked

    private void CBImplementationsMOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsMOMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsMOMouseClicked

    private void CBImplementationsGVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBImplementationsGVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsGVActionPerformed

    private void MICopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MICopyActionPerformed
        // TODO add your handling code here:
        TAInput.copy();
        jMIPaste.setEnabled(true);

    }//GEN-LAST:event_MICopyActionPerformed

    private void jMICutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICutActionPerformed
        // TODO add your handling code here:

        TAInput.cut();
        jMIPaste.setEnabled(true);
    }//GEN-LAST:event_jMICutActionPerformed

    private void jMIPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIPasteActionPerformed
        // TODO add your handling code here:
        TAInput.paste();
        
    }//GEN-LAST:event_jMIPasteActionPerformed

    private void BPackCompositePartHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPackCompositePartHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BPackCompositePartHActionPerformed

    private void BRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRefreshActionPerformed
        // TODO add your handling code here:
        if (!isConnected)
        {
            if(!Collector.isConnected()) {
                JOptionPane.showMessageDialog( null, "Database connection required for assigning features to motifs!\nConnect to Db and referesh TF list.",
                                           "Not connected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            else
                isConnected = true;
        }

        if(isConnected){
        ArrayList<String> TFNameList =Main.CreateTFList();
        lTFList.setListData(TFNameList.toArray());

        lTFList.updateUI();
        }

    }//GEN-LAST:event_BRefreshActionPerformed

    private void BPackCompositePartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BPackCompositePartActionPerformed
        // TODO add your handling code here:

        TAResult.append(Main.MakeCompositePart((String)CBImplementationsP.getSelectedItem()));

    }//GEN-LAST:event_BPackCompositePartActionPerformed

    private void CBImplementationsPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CBImplementationsPMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsPMouseClicked

    private void CBImplementationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBImplementationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBImplementationsActionPerformed

    private void BFindBestSolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BFindBestSolutionActionPerformed
        // TODO add your handling code here:

        String [] error = new String[1];
        error[0] = "";
        Main.findBestSolution(RBPrimitives.isSelected()?0:
                               RBRepressor.isSelected()?1:RBInductor.isSelected()?2:-1 , RBMax.isSelected()?1:RBMin.isSelected()?0:-1 , error);

        TALog.append(error[0]);

        CBImplementations.removeAllItems();
        CBImplementationsGV.removeAllItems();
        //CBImplementations.removeAllItems();
        Iterator<String> iter = Main.getImplementation().iterator();
        while(iter.hasNext()){
            String s = iter.next();
            CBImplementations.addItem(s);
            CBImplementationsGV.addItem(s);
        }

    }//GEN-LAST:event_BFindBestSolutionActionPerformed

    private void BNewFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BNewFileActionPerformed
        // TODO add your handling code here:

        TAInput.setText("");
        TFAddress.setText("");
        TALog.append("New file created!\n");


    }//GEN-LAST:event_BNewFileActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CelloGUINew().setVisible(true);
            }
        });
    }


    public static boolean save (String path, String text)
    {

        try {
            FileWriter fr = new FileWriter(path);
            BufferedWriter br = new BufferedWriter(fr);
            
            br.write(text, 0, text.length());
            br.close();
            return true;

        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
            return false;
        }
    }

    private boolean saveAs( String text, String path) {


        boolean result = false;
        if (path.length()>0)
            FCSaveBrowser.setCurrentDirectory(new File(path));
         int returnVal =  FCSaveBrowser.showOpenDialog(CelloGUINew.this);

        if ( returnVal == JFileChooser.APPROVE_OPTION) {

            String filepath = FCSaveBrowser.getSelectedFile().getPath();
             result = save(filepath, text);
            if (result)
            TFAddress.setText(filepath);
        }
         return result;


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BBrowse;
    private javax.swing.JButton BCompileandGenerateGraph;
    private javax.swing.JButton BFindBestSolution;
    private javax.swing.ButtonGroup BGCostFunctions;
    private javax.swing.ButtonGroup BGDoubleInverter;
    private javax.swing.ButtonGroup BGDoubleInverterH;
    private javax.swing.ButtonGroup BGOptimizationCriteria;
    private javax.swing.ButtonGroup BGTarget;
    private javax.swing.JButton BGateLevelOptimize;
    private javax.swing.JButton BMapping;
    private javax.swing.JButton BMotifLevelOptimization;
    private javax.swing.JButton BNewFile;
    private javax.swing.JButton BPackCompositePart;
    private javax.swing.JButton BPackCompositePartH;
    private javax.swing.JButton BRefresh;
    private javax.swing.JButton BRunH;
    private javax.swing.JButton BSave;
    private javax.swing.JButton BSaveAs;
    private javax.swing.JButton BShowGraph;
    private javax.swing.JButton BShowSequence;
    private javax.swing.JButton BShowSequenceH;
    private javax.swing.JButton BTFSelect;
    private javax.swing.JCheckBox CBFindRepeatPatterns;
    private javax.swing.JCheckBox CBFindRepeatedPatterns;
    private javax.swing.JCheckBox CBHaybridDual;
    private javax.swing.JComboBox CBImplementations;
    private javax.swing.JComboBox CBImplementationsGV;
    private javax.swing.JComboBox CBImplementationsH;
    private javax.swing.JComboBox CBImplementationsM;
    private javax.swing.JComboBox CBImplementationsMO;
    private javax.swing.JComboBox CBImplementationsP;
    private javax.swing.JCheckBox CBMappedGV;
    private javax.swing.JCheckBox CBRemoveBuffers;
    private javax.swing.JCheckBox CBRemoveBuffersH;
    private javax.swing.JCheckBox CBRemoveDoubleInverstersML;
    private javax.swing.JCheckBox CBRemoveDoubleInvertersGL;
    private javax.swing.JCheckBox CBRemoveDoubleInvertersGLH;
    private javax.swing.JCheckBox CBTransfromNOR;
    private javax.swing.JCheckBox CBTransfromNORH;
    private javax.swing.JCheckBox CBfamilyNOR2;
    private javax.swing.JCheckBox CBfamilyNOR2H;
    private javax.swing.JCheckBox CBfamilyNORn;
    private javax.swing.JCheckBox CBfamilyNORnH;
    private javax.swing.JFileChooser FCBrowser;
    private javax.swing.JFileChooser FCSaveBrowser;
    private javax.swing.JMenuItem MICopy;
    private javax.swing.JPanel PAssignSequence;
    private javax.swing.JPanel PCompile;
    private javax.swing.JPanel PGateLevelOptimize;
    private javax.swing.JPanel PGraphView;
    private javax.swing.JPanel PGraphViewChild;
    private javax.swing.JPanel PHome;
    private javax.swing.JPanel PIOTFConstraint;
    private javax.swing.JPanel PMapping;
    private javax.swing.JPanel PMotifLevelOptimization;
    private javax.swing.JRadioButton RBInductor;
    private javax.swing.JRadioButton RBMax;
    private javax.swing.JRadioButton RBMin;
    private javax.swing.JRadioButton RBPrimitives;
    private javax.swing.JRadioButton RBRemoveAllInverters;
    private javax.swing.JRadioButton RBRemoveAllInvertersH;
    private javax.swing.JRadioButton RBRemoveDoubleInvertersbutNORS;
    private javax.swing.JRadioButton RBRemoveDoubleInvertersbutNORSH;
    private javax.swing.JRadioButton RBRepressor;
    private javax.swing.JScrollPane SPLog;
    private javax.swing.JScrollPane SPOutput;
    private javax.swing.JTextArea TAInput;
    private javax.swing.JTextArea TALog;
    private javax.swing.JTextArea TAResult;
    private javax.swing.JTextField TFAddress;
    private javax.swing.JTabbedPane TPControl;
    private javax.swing.JTabbedPane TPResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMEdit;
    private javax.swing.JMenu jMFile;
    private javax.swing.JMenuItem jMICut;
    private javax.swing.JMenuItem jMINew;
    private javax.swing.JMenuItem jMIOpen;
    private javax.swing.JMenuItem jMIPaste;
    private javax.swing.JMenuItem jMISave;
    private javax.swing.JMenuItem jMISaveAs;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JList lTFList;
    // End of variables declaration//GEN-END:variables

    private boolean isConnected;


}
