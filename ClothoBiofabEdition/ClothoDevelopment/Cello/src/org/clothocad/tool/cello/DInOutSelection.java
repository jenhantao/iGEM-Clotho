/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DInOutSelection.java
 *
 * Created on Jul 12, 2011, 11:21:15 AM
 */

package org.clothocad.tool.cello;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.clothocore.api.data.Feature;

/**
 *
 * @author rozagh
 */
public class DInOutSelection extends javax.swing.JDialog {

    /** Creates new form DInOutSelection */
    public DInOutSelection(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setTitle("Set Input and Output Transcription Factors");
        initComponents();
        returnFlag=false;
        new Thread() {
            @Override
            public void run() {

        HashMap<String, HashMap<String, Feature>> inputOutputList = Main.getIOList();
        Iterator<String> iter =inputOutputList.get("input").keySet().iterator();
        
        int iRow=0;

         String col[] = {"Type","Port Name", "TF"};
         final DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(col);
        
        while (iter.hasNext())
        {
            String port = iter.next();
            if (inputOutputList.get("input").get(port)!= null)
            model.insertRow(iRow, new Object[]{"input", port, inputOutputList.get("input").get(port)});
            else
                model.insertRow(iRow, new Object[]{"input", port, "" });

            iRow++;
        }

        iter = inputOutputList.get("output").keySet().iterator();
        while (iter.hasNext())
        {
            String port = iter.next();
            if(inputOutputList.get("output").get(port)!= null)
                model.insertRow(iRow, new Object[]{"output", port, inputOutputList.get("output").get(port)});
            else
                model.insertRow(iRow, new Object[]{"output", port, ""});

            iRow++;
        }
        
         SwingUtilities.invokeLater(new Runnable() {
                @Override
                    public void run() {
                        TIOSelection.setModel(model);
                        setUpTFColumn(TIOSelection, TIOSelection.getColumnModel().getColumn(2));
                    }
                });

        }
        }.start();
        
        setVisible(true);
    }

     private void setUpTFColumn(JTable table,
                                 TableColumn tfColumn) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        //comboBox.addItem("");
        TFList = Main.getTFList();
        Iterator<Feature> iter = TFList.iterator();
        while (iter.hasNext())
        {
            comboBox.addItem(iter.next());
        }
        tfColumn.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer =
                new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        tfColumn.setCellRenderer(renderer);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TIOSelection = new javax.swing.JTable();
        BIOSubmit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        TIOSelection.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TIOSelection);

        BIOSubmit.setText(org.openide.util.NbBundle.getMessage(DInOutSelection.class, "DInOutSelection.BIOSubmit.text")); // NOI18N
        BIOSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BIOSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BIOSubmit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BIOSubmit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BIOSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BIOSubmitActionPerformed
        // TODO add your handling code here:
        String[] err = new String[1];
        err[0] = "";
        if (!checkSelection(err))
            JOptionPane.showMessageDialog(this, err);
        else
        {
            HashMap<String, Feature> inputs = new HashMap<String, Feature>();
            HashMap<String, Feature> outputs = new HashMap<String, Feature>();
           HashMap<String, HashMap<String, Feature>> inputOutputList = new HashMap<String, HashMap<String, Feature>>();
             for (int row=0; row<TIOSelection.getRowCount(); row++)
            {
                String currType = TIOSelection.getValueAt(row, 0).toString();
                String currPort = TIOSelection.getValueAt(row, 1).toString();
                Feature currTF = (Feature) TIOSelection.getValueAt(row, 2);
                if (currType.equals("input"))
                 {
                     inputs.put(currPort, currTF);
                 }
                 else if(currType.equals("output"))
                 {
                     outputs.put(currPort, currTF);
                 }
                /*
                Iterator<Feature> iter = TFList.iterator();
                while(iter.hasNext())
                {
                    Feature currF = iter.next();
                    if (currF.getName().equals(currTF)) //this has problem if the names are same but ID's are different; which ideally should not be a case
                    {
                        //TFList.remove(currF);
                        break;
                    }
                }
                 *
                 */
             }
           inputOutputList.put("input", inputs);
           inputOutputList.put("output", outputs);
           Main.setIOList(inputOutputList);
           returnFlag=true;
           setVisible(false);
        }

    }//GEN-LAST:event_BIOSubmitActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DInOutSelection dialog = new DInOutSelection(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BIOSubmit;
    private javax.swing.JTable TIOSelection;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private static ArrayList<Feature> TFList  = new ArrayList<Feature>();
    public static boolean returnFlag;

    private boolean checkSelection(String[] err) {
        boolean result = true;
        ArrayList<String> col3Value = new ArrayList<String>();
        col3Value.add(TIOSelection.getValueAt(0, 2).toString());
        for (int row=1; row<TIOSelection.getRowCount(); row++)
        {
            String currentCell = TIOSelection.getValueAt(row, 2).toString();
            if (currentCell.equals(""))
            {
                result=false;
                err[0]+= "Unassigned TF value at row# "+ String.valueOf(row+1)+"\n";
            }
            if (col3Value.contains(currentCell))
            {
                result = false;
                err[0]+= "Repeated TF value at row# "+ String.valueOf(row+1)+"\n";
            }else{
                 col3Value.add(currentCell);
            }
        }

        return result;
    }

}
